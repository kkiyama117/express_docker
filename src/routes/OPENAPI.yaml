openapi: 3.0.0
info:
  description: "test API server"
  version: 0.4.12
  title: Example API server
  termsOfService: 'https://github.com/kkiyama117/express_docker/'
  contact:
    email: "k.kiyama117@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Note
    description: Everything about your Notes
    externalDocs:
      description: Find out more
      url: https://github.com/kkiyama117/express_docker/blob/master/src/entity/Note.ts
  - name: User
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: https://github.com/kkiyama117/express_docker/blob/master/src/entity/User.ts
paths:
  "/notes":
    get:
      tags:
        - Note
      summary: get note to the store
      description: ""
      operationId: addNote
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Note"
        "405":
          description: Invalid input
      security:
        - notestore_auth:
            - read:notes
  "/notes/{noteId}":
    get:
      tags:
        - Note
      summary: Find Note by ID
      description: Returns a single Note
      operationId: getPetById
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
    post:
      tags:
        - Note
      summary: Updates a note in the store with form data
      description: ""
      operationId: updateNoteWithForm
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  description: Updated name of the note
                  type: string
                lastName:
                  description: Updated name of the note
                  type: string
                password:
                  description: Updated status of the note
                  type: string
      responses:
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:notes
            - read:notes
        - api_key: []
    delete:
      tags:
        - Note
      summary: Deletes a Note
      description: ""
      operationId: deleteNote
      parameters:
        - name: api_key
          in: header
          required: true
          schema:
            type: string
        - name: noteId
          in: path
          description: Note id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:notes
            - read:notes

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithListInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found

components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
    Note:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Note"
        application/xml:
          schema:
            $ref: "#/components/schemas/Note"
      description: Note object that needs to be added to the store
      required: true
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        roles:
          type: integer
          format: int32
          description: User Roles
    Note:
      type: object
      required:
        - title
        - text
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: note_1
        users:
          $ref: "#/components/schemas/Note"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"